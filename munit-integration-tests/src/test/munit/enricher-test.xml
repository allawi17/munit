<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:spring="http://www.springframework.org/schema/beans"
      xmlns:context="http://www.springframework.org/schema/context"
      xmlns:script="http://www.mulesoft.org/schema/mule/scripting"
      xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
      xmlns:mock="http://www.mulesoft.org/schema/mule/mock"
      xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
        http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
        http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
        http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd">

    <munit:config/>
    <mock:config/>

    <!--<spring:beans>-->
        <!--<spring:import resource="enricher-config.xml"/>-->
    <!--</spring:beans>-->


    <!--<script:script name="mockOrganization" engine="groovy"><![CDATA[-->
            <!--org.mule.munit.Organization organization = new org.mule.munit.Organization();-->
            <!--organization.setDatabase("databaseName");-->
			<!--return organization;-->
		<!--]]>-->
    <!--</script:script>-->

    <!--<script:script name="mockConsumer" engine="groovy"><![CDATA[-->
			<!--return new org.mule.munit.Consumer();-->
		<!--]]>-->
    <!--</script:script>-->

    <!--<munit:test ignore="true" name="testCreateConsumerVersion" description="Testing the API to create a consumer version">-->
        <!--<munit:set payload-ref="#[resultOfScript('mockConsumer')]">-->
            <!--<munit:invocation-properties>-->
                <!--<munit:invocation-property key="consumerName" value-ref="#[string:consumerName]"/>-->
            <!--</munit:invocation-properties>-->
            <!--<munit:inbound-properties>-->
                <!--<munit:inbound-property key="http.query.params"-->
                                        <!--value-ref="#[['organizationName':'dummyOrganization']]"/>-->
            <!--</munit:inbound-properties>-->
        <!--</munit:set>-->

        <!--<mock:when messageProcessor="morphia:find-single">-->
            <!--<mock:with-attributes>-->
                <!--<mock:with-attribute name="className" whereValue-ref="#[string:org.mule.munit.Organization]"/>-->
            <!--</mock:with-attributes>-->
            <!--<mock:then-return payload-ref="#[resultOfScript('mockOrganization')]"/>-->
        <!--</mock:when>-->

        <!--<mock:when messageProcessor="morphia:find-single">-->
            <!--<mock:with-attributes>-->
                <!--<mock:with-attribute name="className" whereValue-ref="#[string:org.mule.munit.Consumer]"/>-->
            <!--</mock:with-attributes>-->
            <!--<mock:then-return payload-ref="#[resultOfScript('mockConsumer')]"/>-->
        <!--</mock:when>-->

        <!--<mock:when messageProcessor="morphia:save">-->
            <!--<mock:then-return payload-ref="#[string:anyPayload]"/>-->
        <!--</mock:when>-->

        <!--<mock:when messageProcessor="loggly:logger"/>-->

        <!--<flow-ref name="create-consumer-version"/>-->

        <!--<mock:verify-call messageProcessor="morphia:find-single" times="2"/>-->
        <!--<mock:verify-call messageProcessor="morphia:save" times="1"/>-->

        <!--<munit:assert-on-equals expected-ref='#[Integer.valueOf("1")]'-->
                                <!--value-ref="#[flowVars['consumer'].getVersions().size()]"/>-->
        <!--<munit:assert-on-equals expected-ref='#[string:3.3.1]'-->
                                <!--value-ref="#[flowVars['consumer'].getVersions().get(0)]"/>-->
    <!--</munit:test>-->

    <!--<munit:test ignore="true" name="testCreateConsumerVersionInvalidConsumer"-->
                <!--description="Testing the API to create a consumer version with invalid consumer name">-->
        <!--<munit:set payload-ref="#[resultOfScript('mockConsumer')]">-->
            <!--<munit:invocation-properties>-->
                <!--<munit:invocation-property key="consumerName" value-ref="#[string:consumerName]"/>-->
            <!--</munit:invocation-properties>-->
            <!--<munit:inbound-properties>-->
                <!--<munit:inbound-property key="http.query.params"-->
                                        <!--value-ref="#[['organizationName':'dummyOrganization']]"/>-->
            <!--</munit:inbound-properties>-->
        <!--</munit:set>-->

        <!--<mock:when messageProcessor="morphia:find-single">-->
            <!--<mock:with-attributes>-->
                <!--<mock:with-attribute name="className" whereValue-ref="#[string:org.mule.munit.Organization]"/>-->
            <!--</mock:with-attributes>-->
            <!--<mock:then-return payload-ref="#[resultOfScript('mockOrganization')]"/>-->
        <!--</mock:when>-->

        <!--<mock:when messageProcessor="morphia:find-single">-->
            <!--<mock:with-attributes>-->
                <!--<mock:with-attribute name="className" whereValue-ref="#[string:org.mule.munit.Consumer]"/>-->
            <!--</mock:with-attributes>-->
            <!--<mock:then-return payload-ref="#[groovy:org.mule.transport.NullPayload.getInstance()]"/>-->
        <!--</mock:when>-->

        <!--<mock:when messageProcessor="loggly:logger"/>-->

        <!--<flow-ref name="create-consumer-version"/>-->

        <!--<mock:verify-call messageProcessor="morphia:find-single" times="2"/>-->
        <!--<mock:verify-call messageProcessor="morphia:save" times="0"/>-->
        <!--<munit:assert-on-equals expected-ref='#[string:404]' value-ref="#[message.outboundProperties['http.status']]"/>-->
    <!--</munit:test>-->

    <!--<munit:test ignore="true" name="testCreateConsumerVersionInvalidOrganization"-->
                <!--description="Testing the API to create a consumer version with invalid organization name">-->
        <!--<munit:set payload-ref="#[resultOfScript('mockConsumer')]">-->
            <!--<munit:invocation-properties>-->
                <!--<munit:invocation-property key="consumerName" value-ref="#[string:consumerName]"/>-->
            <!--</munit:invocation-properties>-->
            <!--<munit:inbound-properties>-->
                <!--<munit:inbound-property key="http.query.params"-->
                                        <!--value-ref="#[['organizationName':'dummyOrganization']]"/>-->
            <!--</munit:inbound-properties>-->
        <!--</munit:set>-->

        <!--<mock:when messageProcessor="morphia:find-single">-->
            <!--<mock:with-attributes>-->
                <!--<mock:with-attribute name="className" whereValue-ref="#[string:org.mule.munit.Organization]"/>-->
            <!--</mock:with-attributes>-->
            <!--<mock:then-return payload-ref="#[groovy:org.mule.transport.NullPayload.getInstance()]"/>-->
        <!--</mock:when>-->

        <!--<mock:when messageProcessor="loggly:logger"/>-->

        <!--<flow-ref name="create-consumer-version"/>-->

        <!--<mock:verify-call messageProcessor="morphia:find-single" times="1"/>-->
        <!--<mock:verify-call messageProcessor="morphia:save" times="0"/>-->
        <!--<munit:assert-on-equals expected-ref='#[string:404]' value-ref="#[message.outboundProperties['http.status']]"/>-->
    <!--</munit:test>-->


    <!--<munit:test ignore="true" name="testFailingSave" description="Test that we handle the duplicate exception">-->
        <!--<munit:set payload-ref="#[resultOfScript('mockConsumer')]">-->
            <!--<munit:invocation-properties>-->
                <!--<munit:invocation-property key="consumerName" value-ref="#[string:consumerName]"/>-->
            <!--</munit:invocation-properties>-->
            <!--<munit:inbound-properties>-->
                <!--<munit:inbound-property key="http.query.params"-->
                                        <!--value-ref="#[['organizationName':'dummyOrganization']]"/>-->
            <!--</munit:inbound-properties>-->
        <!--</munit:set>-->

        <!--<mock:when messageProcessor="morphia:find-single">-->
            <!--<mock:with-attributes>-->
                <!--<mock:with-attribute name="className" whereValue-ref="#[string:org.mule.munit.Organization]"/>-->
            <!--</mock:with-attributes>-->
            <!--<mock:then-return payload-ref="#[resultOfScript('mockOrganization')]"/>-->
        <!--</mock:when>-->

        <!--<mock:when messageProcessor="morphia:find-single">-->
            <!--<mock:with-attributes>-->
                <!--<mock:with-attribute name="className" whereValue-ref="#[string:org.mule.munit.Consumer]"/>-->
            <!--</mock:with-attributes>-->
            <!--<mock:then-return payload-ref="#[resultOfScript('mockConsumer')]"/>-->
        <!--</mock:when>-->

        <!--<mock:throw-an exception-ref="#[new org.mule.munit.DuplicateKeyException()]" whenCalling="morphia:save"/>-->

        <!--<mock:when messageProcessor="loggly:logger"/>-->

        <!--<flow-ref name="create-consumer-version"/>-->

        <!--<mock:verify-call messageProcessor="morphia:find-single" times="2"/>-->
        <!--<mock:verify-call messageProcessor="morphia:save" times="1"/>-->

        <!--<munit:assert-on-equals expected-ref='#[string:409]' value-ref="#[message.outboundProperties['http.status']]"/>-->
    <!--</munit:test>-->


</mule>
